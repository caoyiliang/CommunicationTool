<Window x:Name="window" x:Class="CommunicationTool.View.Test"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CommunicationTool.View"
        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:i="clr-namespace:CommunicationTool.Behaviors"
        xmlns:config="clr-namespace:Config;assembly=Config"
        xmlns:core="clr-namespace:System;assembly=mscorlib"
        xmlns:converter="clr-namespace:CommunicationTool.Converters"
        xmlns:ctrl="clr-namespace:CommunicationTool.Control"
        xmlns:viewmodel="clr-namespace:CommunicationTool.ViewModel" 
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        d:DataContext="{d:DesignInstance Type=viewmodel:TestViewModel}"
        Style="{StaticResource TestWindow}"
        mc:Ignorable="d"
        Title="SerialPortTest" Height="450" Width="800">
    <Window.Resources>
        <converter:ConnectStatusConverter x:Key="ConnectStatusConverter"/>
        <converter:PopupStatusConverter x:Key="PopupStatusConverter"/>
        <converter:EqualityMultiConverter x:Key="EqualityMultiConverter"/>
        <converter:TabItemStateConverter x:Key="TabItemStateConverter"/>
    </Window.Resources>
    <b:Interaction.Behaviors>
        <i:CloseBehavior Command="{Binding CloseCommand}"/>
        <!--<i:ClosePopupBehavior PopupVisible="{Binding HasPopupVisible}"/>-->
    </b:Interaction.Behaviors>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>
            <TabControl ItemsSource="{Binding TabItems}" SelectedItem="{Binding SelectedTabItem}" Background="Transparent" BorderThickness="0">
                <TabControl.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="{Binding Header}"/>
                            <Button Content="X" Margin="5,0" Command="{Binding CloseCommand}" Visibility="{Binding IsConnect,Converter={StaticResource TabItemStateConverter}}">
                                <Button.Template>
                                    <ControlTemplate TargetType="Button">
                                        <TextBlock Text="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                    </ControlTemplate>
                                </Button.Template>
                            </Button>
                        </StackPanel>
                    </DataTemplate>
                </TabControl.ItemTemplate>
                <TabControl.ContentTemplate>
                    <DataTemplate>
                        <local:Receive DataContext="{Binding ReceiveViewModel}" />
                    </DataTemplate>
                </TabControl.ContentTemplate>
            </TabControl>
            <Grid Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Button Margin="10" Padding="10,5" Command="{Binding ConnectCommand}">
                    <Button.Content>
                        <MultiBinding Converter="{StaticResource ConnectStatusConverter}">
                            <Binding Path="PhysicalPortConnection.Type"/>
                            <Binding Path="IsOpen"/>
                        </MultiBinding>
                    </Button.Content>
                </Button>
                <local:Send Grid.Column="1" DataContext="{Binding SendViewModel}"/>
            </Grid>
        </Grid>
        <StatusBar Padding="5" Grid.Row="2" Grid.ColumnSpan="2">
            <StatusBar.Resources>
                <Style TargetType="Button">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Button">
                                <TextBlock Text="{TemplateBinding Content}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </StatusBar.Resources>
            <StatusBarItem>
                <Grid>
                    <Button Content="{Binding Status}" Command="{Binding SetSerialPortConfigCommand}"/>
                    <Popup IsOpen="{Binding IsPopupVisible}" StaysOpen="False" Placement="MousePoint" AllowsTransparency="True">
                        <Popup.Resources>
                            <Style TargetType="Label">
                                <Setter Property="Foreground" Value="White"/>
                                <Setter Property="Margin" Value="2"/>
                            </Style>
                            <Style TargetType="ComboBox">
                                <Setter Property="Margin" Value="2"/>
                            </Style>
                            <Style TargetType="TextBox">
                                <Setter Property="Margin" Value="2"/>
                            </Style>
                            <Style TargetType="CheckBox">
                                <Setter Property="Foreground" Value="White"/>
                                <Setter Property="Margin" Value="2"/>
                            </Style>
                            <DataTemplate x:Key="SerialPortTemplate">
                                <Grid Width="165" Height="200" Background="#590000FF">
                                    <Grid HorizontalAlignment="Center" 
                                          VerticalAlignment="Center" 
                                          d:DataContext="{d:DesignInstance Type=viewmodel:TestViewModel}" 
                                          DataContext="{Binding DataContext,RelativeSource={RelativeSource AncestorType=Window}}">
                                        <Grid.RowDefinitions>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="auto"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Label Content="串口号"/>
                                        <ComboBox ItemsSource="{Binding PortNames}" SelectedItem="{Binding PhysicalPortConnection.PortName}" Grid.Column="1"/>
                                        <Label Content="波特率" Grid.Row="1"/>
                                        <ComboBox ItemsSource="{Binding BaudRates}" SelectedItem="{Binding PhysicalPortConnection.BaudRate}" Grid.Column="1" Grid.Row="1" IsEditable="True"/>
                                        <Label Content="数据位" Grid.Row="2"/>
                                        <ComboBox ItemsSource="{Binding DataBits}" SelectedItem="{Binding PhysicalPortConnection.DataBits}" Grid.Column="1" Grid.Row="2"/>
                                        <Label Content="停止位" Grid.Row="3"/>
                                        <ComboBox ItemsSource="{Binding StopBits}" SelectedItem="{Binding PhysicalPortConnection.StopBits}" Grid.Column="1" Grid.Row="3"/>
                                        <Label Content="校验位" Grid.Row="4"/>
                                        <ComboBox ItemsSource="{Binding Parity}" SelectedItem="{Binding PhysicalPortConnection.Parity}" Grid.Column="1" Grid.Row="4"/>
                                        <Grid Grid.Column="1" Grid.Row="5">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition/>
                                                <ColumnDefinition/>
                                            </Grid.ColumnDefinitions>
                                            <CheckBox Content="DTR" IsChecked="{Binding PhysicalPortConnection.DTR}"/>
                                            <CheckBox Content="RTS" IsChecked="{Binding PhysicalPortConnection.RTS}" Grid.Column="1"/>
                                        </Grid>
                                    </Grid>
                                </Grid>
                            </DataTemplate>
                            <DataTemplate x:Key="TcpClientTemplate">
                                <Grid Width="250" Height="100" Background="#590000FF">
                                    <Grid HorizontalAlignment="Center" 
                                          VerticalAlignment="Center" 
                                          d:DataContext="{d:DesignInstance Type=viewmodel:TestViewModel}" 
                                          DataContext="{Binding DataContext,RelativeSource={RelativeSource AncestorType=Window}}">
                                        <Grid.RowDefinitions>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="auto"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Label Content="远程地址"/>
                                        <TextBox Text="{Binding PhysicalPortConnection.HostName}" Grid.Column="1" Width="120"/>
                                        <Label Content="远程端口" Grid.Row="1"/>
                                        <TextBox Text="{Binding PhysicalPortConnection.Port}" Grid.Column="1" Grid.Row="1"/>
                                    </Grid>
                                </Grid>
                            </DataTemplate>
                        </Popup.Resources>
                        <ContentControl>
                            <ContentControl.Style>
                                <Style TargetType="ContentControl">
                                    <Setter Property="ContentTemplate" Value="{StaticResource SerialPortTemplate}" />
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding PhysicalPortConnection.Type}" Value="{x:Static config:TestType.SerialPort}">
                                            <Setter Property="ContentTemplate" Value="{StaticResource SerialPortTemplate}" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding PhysicalPortConnection.Type}" Value="{x:Static config:TestType.TcpClient}">
                                            <Setter Property="ContentTemplate" Value="{StaticResource TcpClientTemplate}" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentControl.Style>
                        </ContentControl>
                    </Popup>
                </Grid>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Right">
                <Grid>
                    <Button Content="{Binding HasPopupVisible,Converter={StaticResource PopupStatusConverter}}" Command="{Binding HasPopupCommand}"/>
                    <ctrl:CustomPopup IsOpen="{Binding HasPopupVisible}" StaysOpen="True" Placement="Right" PlacementTarget="{Binding ElementName=window}" AllowsTransparency="True" >
                        <Border Background="#88FFFFFF" CornerRadius="8" Width="500" Height="{Binding ActualHeight, ElementName=window, Mode=OneWay}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition/>
                                    <RowDefinition Height="auto"/>
                                </Grid.RowDefinitions>
                                <TextBlock Text="发送列表" Margin="5" Foreground="Blue">
                                    <TextBlock.Effect>
                                        <DropShadowEffect ShadowDepth="2" Direction="330" Color="Black" Opacity="0.5" BlurRadius="4"/>
                                    </TextBlock.Effect>
                                </TextBlock>
                                <DataGrid ItemsSource="{Binding SendCmds}" AutoGenerateColumns="False" CanUserAddRows="True" CanUserDeleteRows="True" Grid.Row="1">
                                    <DataGrid.Resources>
                                        <ObjectDataProvider x:Key="SendTypeEnum" MethodName="GetValues" ObjectType="{x:Type core:Enum}">
                                            <ObjectDataProvider.MethodParameters>
                                                <x:Type Type="config:DataType"/>
                                            </ObjectDataProvider.MethodParameters>
                                        </ObjectDataProvider>
                                        <ObjectDataProvider x:Key="CrcTypeEnum" MethodName="GetValues" ObjectType="{x:Type core:Enum}">
                                            <ObjectDataProvider.MethodParameters>
                                                <x:Type Type="config:CrcType"/>
                                            </ObjectDataProvider.MethodParameters>
                                        </ObjectDataProvider>
                                    </DataGrid.Resources>
                                    <DataGrid.RowStyle>
                                        <Style TargetType="DataGridRow">
                                            <Style.Triggers>
                                                <DataTrigger Value="True">
                                                    <DataTrigger.Binding>
                                                        <MultiBinding Converter="{StaticResource EqualityMultiConverter}">
                                                            <Binding Path="Id" />
                                                            <Binding Path="DataContext.CurrentSendId" RelativeSource="{RelativeSource AncestorType=Window}" />
                                                        </MultiBinding>
                                                    </DataTrigger.Binding>
                                                    <Setter Property="Background" Value="LightBlue"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </DataGrid.RowStyle>
                                    <DataGrid.Background>
                                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                            <GradientStop Color="#6654FF00"/>
                                            <GradientStop Color="#66FF0000" Offset="1"/>
                                        </LinearGradientBrush>
                                    </DataGrid.Background>
                                    <DataGrid.Columns>
                                        <DataGridCheckBoxColumn Binding="{Binding IsSelected,UpdateSourceTrigger=PropertyChanged}" />
                                        <DataGridTextColumn Header="名称" Binding="{Binding Name,UpdateSourceTrigger=PropertyChanged}" Width="3*"/>
                                        <DataGridComboBoxColumn Header="类型" SelectedItemBinding="{Binding SendType,UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding Source={StaticResource SendTypeEnum}}" Width="2*"/>
                                        <DataGridTextColumn Header="发送命令" Binding="{Binding DisplayCmd,UpdateSourceTrigger=LostFocus}" Width="4*"/>
                                        <DataGridCheckBoxColumn Header="回车" Binding="{Binding CR,UpdateSourceTrigger=PropertyChanged}" Width="*"/>
                                        <DataGridCheckBoxColumn Header="换行" Binding="{Binding LF,UpdateSourceTrigger=PropertyChanged}"  Width="*"/>
                                        <DataGridComboBoxColumn Header="校验" SelectedItemBinding="{Binding CrcType,UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding Source={StaticResource CrcTypeEnum}}" Width="2*"/>
                                        <DataGridTemplateColumn Header="操作" Width="auto">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <Button Style="{x:Null}" Content="发送" Command="{Binding DataContext.SendDataCommand,RelativeSource={RelativeSource AncestorType=Window}}" CommandParameter="{Binding}"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                        </DataGridTemplateColumn>
                                    </DataGrid.Columns>
                                </DataGrid>
                                <StackPanel Orientation="Horizontal" Margin="5" Grid.Row="2">
                                    <CheckBox Content="循环发送列表勾选，间隔:" IsChecked="{Binding IsAutoSend}" VerticalContentAlignment="Center"/>
                                    <TextBox Text="{Binding SendInterval,UpdateSourceTrigger=LostFocus}" VerticalContentAlignment="Center" Width="50" Margin="5,0"/>
                                    <TextBlock Text="ms" VerticalAlignment="Center"/>
                                </StackPanel>
                            </Grid>
                        </Border>
                    </ctrl:CustomPopup>
                </Grid>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
